// Mocks generated by Mockito 5.4.4 from annotations
// in segment_analytics/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:convert' as _i2;
import 'dart:typed_data' as _i7;

import 'package:http/http.dart' as _i3;
import 'package:http/src/byte_stream.dart' as _i9;
import 'package:logger/logger.dart' as _i16;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:segment_analytics/event.dart' as _i11;
import 'package:segment_analytics/flush_policies/flush_policy.dart' as _i14;
import 'package:segment_analytics/logger.dart' as _i6;
import 'package:segment_analytics/native_context.dart' as _i5;
import 'package:segment_analytics/state.dart' as _i12;
import 'package:segment_analytics/utils/http_client.dart' as _i10;
import 'package:segment_analytics/utils/store/store.dart' as _i13;
import 'package:state_notifier/state_notifier.dart' as _i15;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEncoding_0 extends _i1.SmartFake implements _i2.Encoding {
  _FakeEncoding_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_1 extends _i1.SmartFake implements Uri {
  _FakeUri_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_2 extends _i1.SmartFake
    implements _i3.StreamedResponse {
  _FakeStreamedResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_3<T1> extends _i1.SmartFake implements _i4.Future<T1> {
  _FakeFuture_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNativeContext_4 extends _i1.SmartFake implements _i5.NativeContext {
  _FakeNativeContext_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LogTarget].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogTarget extends _i1.Mock implements _i6.LogTarget {
  @override
  void parseLog(_i6.LogMessage? log) => super.noSuchMethod(
        Invocation.method(
          #parseLog,
          [log],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Request].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequest extends _i1.Mock implements _i3.Request {
  @override
  int get contentLength => (super.noSuchMethod(
        Invocation.getter(#contentLength),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set contentLength(int? value) => super.noSuchMethod(
        Invocation.setter(
          #contentLength,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Encoding get encoding => (super.noSuchMethod(
        Invocation.getter(#encoding),
        returnValue: _FakeEncoding_0(
          this,
          Invocation.getter(#encoding),
        ),
        returnValueForMissingStub: _FakeEncoding_0(
          this,
          Invocation.getter(#encoding),
        ),
      ) as _i2.Encoding);

  @override
  set encoding(_i2.Encoding? value) => super.noSuchMethod(
        Invocation.setter(
          #encoding,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Uint8List get bodyBytes => (super.noSuchMethod(
        Invocation.getter(#bodyBytes),
        returnValue: _i7.Uint8List(0),
        returnValueForMissingStub: _i7.Uint8List(0),
      ) as _i7.Uint8List);

  @override
  set bodyBytes(List<int>? value) => super.noSuchMethod(
        Invocation.setter(
          #bodyBytes,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get body => (super.noSuchMethod(
        Invocation.getter(#body),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#body),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#body),
        ),
      ) as String);

  @override
  set body(String? value) => super.noSuchMethod(
        Invocation.setter(
          #body,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<String, String> get bodyFields => (super.noSuchMethod(
        Invocation.getter(#bodyFields),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  set bodyFields(Map<String, String>? fields) => super.noSuchMethod(
        Invocation.setter(
          #bodyFields,
          fields,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get method => (super.noSuchMethod(
        Invocation.getter(#method),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#method),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#method),
        ),
      ) as String);

  @override
  Uri get url => (super.noSuchMethod(
        Invocation.getter(#url),
        returnValue: _FakeUri_1(
          this,
          Invocation.getter(#url),
        ),
        returnValueForMissingStub: _FakeUri_1(
          this,
          Invocation.getter(#url),
        ),
      ) as Uri);

  @override
  Map<String, String> get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: <String, String>{},
        returnValueForMissingStub: <String, String>{},
      ) as Map<String, String>);

  @override
  bool get persistentConnection => (super.noSuchMethod(
        Invocation.getter(#persistentConnection),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set persistentConnection(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #persistentConnection,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get followRedirects => (super.noSuchMethod(
        Invocation.getter(#followRedirects),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set followRedirects(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #followRedirects,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get maxRedirects => (super.noSuchMethod(
        Invocation.getter(#maxRedirects),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set maxRedirects(int? value) => super.noSuchMethod(
        Invocation.setter(
          #maxRedirects,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get finalized => (super.noSuchMethod(
        Invocation.getter(#finalized),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i9.ByteStream finalize() => (super.noSuchMethod(
        Invocation.method(
          #finalize,
          [],
        ),
        returnValue: _i8.dummyValue<_i9.ByteStream>(
          this,
          Invocation.method(
            #finalize,
            [],
          ),
        ),
        returnValueForMissingStub: _i8.dummyValue<_i9.ByteStream>(
          this,
          Invocation.method(
            #finalize,
            [],
          ),
        ),
      ) as _i9.ByteStream);

  @override
  _i4.Future<_i3.StreamedResponse> send() => (super.noSuchMethod(
        Invocation.method(
          #send,
          [],
        ),
        returnValue:
            _i4.Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_2(
          this,
          Invocation.method(
            #send,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_2(
          this,
          Invocation.method(
            #send,
            [],
          ),
        )),
      ) as _i4.Future<_i3.StreamedResponse>);
}

/// A class which mocks [StreamSubscription].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamSubscription<T> extends _i1.Mock
    implements _i4.StreamSubscription<T> {
  @override
  bool get isPaused => (super.noSuchMethod(
        Invocation.getter(#isPaused),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Future<void> cancel() => (super.noSuchMethod(
        Invocation.method(
          #cancel,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void onData(void Function(T)? handleData) => super.noSuchMethod(
        Invocation.method(
          #onData,
          [handleData],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(Function? handleError) => super.noSuchMethod(
        Invocation.method(
          #onError,
          [handleError],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onDone(void Function()? handleDone) => super.noSuchMethod(
        Invocation.method(
          #onDone,
          [handleDone],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pause([_i4.Future<void>? resumeSignal]) => super.noSuchMethod(
        Invocation.method(
          #pause,
          [resumeSignal],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void resume() => super.noSuchMethod(
        Invocation.method(
          #resume,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<E> asFuture<E>([E? futureValue]) => (super.noSuchMethod(
        Invocation.method(
          #asFuture,
          [futureValue],
        ),
        returnValue: _i8.ifNotNull(
              _i8.dummyValueOrNull<E>(
                this,
                Invocation.method(
                  #asFuture,
                  [futureValue],
                ),
              ),
              (E v) => _i4.Future<E>.value(v),
            ) ??
            _FakeFuture_3<E>(
              this,
              Invocation.method(
                #asFuture,
                [futureValue],
              ),
            ),
        returnValueForMissingStub: _i8.ifNotNull(
              _i8.dummyValueOrNull<E>(
                this,
                Invocation.method(
                  #asFuture,
                  [futureValue],
                ),
              ),
              (E v) => _i4.Future<E>.value(v),
            ) ??
            _FakeFuture_3<E>(
              this,
              Invocation.method(
                #asFuture,
                [futureValue],
              ),
            ),
      ) as _i4.Future<E>);
}

/// A class which mocks [HTTPClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockHTTPClient extends _i1.Mock implements _i10.HTTPClient {
  @override
  _i4.Future<bool> startBatchUpload(
    String? writeKey,
    List<_i11.RawEvent>? batch, {
    String? host,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startBatchUpload,
          [
            writeKey,
            batch,
          ],
          {#host: host},
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i12.SegmentAPISettings?> settingsFor(String? writeKey) =>
      (super.noSuchMethod(
        Invocation.method(
          #settingsFor,
          [writeKey],
        ),
        returnValue: _i4.Future<_i12.SegmentAPISettings?>.value(),
        returnValueForMissingStub: _i4.Future<_i12.SegmentAPISettings?>.value(),
      ) as _i4.Future<_i12.SegmentAPISettings?>);
}

/// A class which mocks [Store].
///
/// See the documentation for Mockito's code generation for more information.
class MockStore extends _i1.Mock implements _i13.Store {
  @override
  _i4.Future<dynamic> get ready => (super.noSuchMethod(
        Invocation.getter(#ready),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  _i4.Future<Map<String, dynamic>?> getPersisted(String? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPersisted,
          [key],
        ),
        returnValue: _i4.Future<Map<String, dynamic>?>.value(),
        returnValueForMissingStub: _i4.Future<Map<String, dynamic>?>.value(),
      ) as _i4.Future<Map<String, dynamic>?>);

  @override
  _i4.Future<dynamic> setPersisted(
    String? key,
    Map<String, dynamic>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setPersisted,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<dynamic>.value(),
        returnValueForMissingStub: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FlushPolicy].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlushPolicy extends _i1.Mock implements _i14.FlushPolicy {
  @override
  bool get shouldFlush => (super.noSuchMethod(
        Invocation.getter(#shouldFlush),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  get startCalled => true;

  get onEventCalled => true;

  @override
  set shouldFlush(bool? shouldFlush) => super.noSuchMethod(
        Invocation.setter(
          #shouldFlush,
          shouldFlush,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onError(_i15.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Stream<bool> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<bool>.empty(),
        returnValueForMissingStub: _i4.Stream<bool>.empty(),
      ) as _i4.Stream<bool>);

  @override
  bool get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  set state(bool? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void start() => super.noSuchMethod(
        Invocation.method(
          #start,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i11.RawEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void reset() => super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    bool? old,
    bool? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i15.RemoveListener addListener(
    _i15.Listener<bool>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
        returnValueForMissingStub: () {},
      ) as _i15.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Logger].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogger extends _i1.Mock implements _i16.Logger {
  @override
  _i4.Future<void> get init => (super.noSuchMethod(
        Invocation.getter(#init),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void v(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #v,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void t(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #t,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void d(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #d,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void i(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #i,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void w(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #w,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void e(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #e,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void wtf(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #wtf,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void f(
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #f,
          [message],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void log(
    _i16.Level? level,
    dynamic message, {
    DateTime? time,
    Object? error,
    StackTrace? stackTrace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #log,
          [
            level,
            message,
          ],
          {
            #time: time,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isClosed() => (super.noSuchMethod(
        Invocation.method(
          #isClosed,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [NativeContextApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockNativeContextApi extends _i1.Mock implements _i5.NativeContextApi {
  @override
  _i4.Future<_i5.NativeContext> getContext(bool? arg_collectDeviceId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getContext,
          [arg_collectDeviceId],
        ),
        returnValue: _i4.Future<_i5.NativeContext>.value(_FakeNativeContext_4(
          this,
          Invocation.method(
            #getContext,
            [arg_collectDeviceId],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i5.NativeContext>.value(_FakeNativeContext_4(
          this,
          Invocation.method(
            #getContext,
            [arg_collectDeviceId],
          ),
        )),
      ) as _i4.Future<_i5.NativeContext>);
}
